//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\NC_PROGRAMS\patroN.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: rizva
//              Version: NX 2412
//              Date: 03-28-2025  (Format: mm-dd-yyyy)
//              Time: 00:02 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using AutomationOfPostprocessing.Services.FileSystem;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Features;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class PostprocessDialog
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private static PostprocessorLoader postprocessorLoader = null;
    private static BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group1;// Block type: Group
    private ListBox list_box0;// Block type: List Box
    private NXOpen.BlockStyler.Group group;// Block type: Group
    private FolderSelection nativeFolderBrowser0;// Block type: NativeFolderBrowser
    private string postName;
    private string outputDir;

    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public PostprocessDialog(Session session, UI ui)
    {
        try
        {
            theSession = session;
            theUI = ui;
            postprocessorLoader = new PostprocessorLoader();
            //theDlxFileName = "patroN.dlx";
            //theDlxFileName = Path.Combine(Environment.GetEnvironmentVariable("UGII_USER_DIR"),
            //              "patroN.dlx");
            string ugiiUserDir = Environment.GetEnvironmentVariable("UGII_USER_DIR");
            string theDlxFileName = Path.Combine(ugiiUserDir, "application", "patroN.dlx");
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------

    public static void Init(Session theSession, UI theUI)
    {
        PostprocessDialog postDialog = null;
        try
        {
            postDialog = new PostprocessDialog(theSession, theUI);
            // The following method shows the dialog immediately
            postDialog.Launch();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            postDialog?.Dispose();

            //thepatroN = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    //public static int GetUnloadOption(string arg)
    //{
    //    //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
    //    return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
    //    // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    //}

    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        theDialog?.Dispose();
        theDialog = null;
        //try
        //{
        //    //---- Enter your code here -----
        //    theSession = null;
        //    theUI = null;
        //}
        //catch (Exception ex)
        //{
        //    //---- Enter your exception handling code here -----
        //    theUI?.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        //}
    }

    //------------------------------------------------------------------------------
    //This method launches the dialog to screen
    //------------------------------------------------------------------------------
    public BlockDialog.DialogResponse Launch()
    {
        BlockDialog.DialogResponse dialogResponse = BlockDialog.DialogResponse.Invalid;
        try
        {
            dialogResponse = theDialog.Launch();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return dialogResponse;
    }

    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if (theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
            list_box0 = (ListBox)theDialog.TopBlock.FindBlock("list_box0");
            list_box0.SingleSelect = true;

            group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
            nativeFolderBrowser0 = (FolderSelection)theDialog.TopBlock.FindBlock("nativeFolderBrowser0");
            nativeFolderBrowser0.Path = @"D:\NC_PROGRAMS\";

            //------------------------------------------------------------------------------
            //Registration of ListBox specific callbacks
            //------------------------------------------------------------------------------
            //list_box0.SetAddHandler(new NXOpen.BlockStyler.ListBox.AddCallback(AddCallback));

            //list_box0.SetDeleteHandler(new NXOpen.BlockStyler.ListBox.DeleteCallback(DeleteCallback));

            //------------------------------------------------------------------------------
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
            list_box0.SetListItems(new string[0]);
            //var posts = GetRegisteredPostprocessors().ToArray();
            var posts = postprocessorLoader.GetAvailablePostprocessors().ToArray();

            if (posts.Length == 0)
            {
                theUI.NXMessageBox.Show("Инфо", NXMessageBox.DialogType.Information,
                                       "Нет установленных постпроцессоров");
                return;
            }

            Array.Sort(posts);

            list_box0.SetListItems(posts);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
            int[] selectedIndices = list_box0.GetSelectedItems();

            if (selectedIndices.Length == 0)
            {
                theUI.NXMessageBox.Show("Ошибка", NXMessageBox.DialogType.Error,
                                       "Не выбран постпроцессор!");
                return 1;
            }

            string[] posts = list_box0.GetListItems();
            postName = posts[selectedIndices[0]];
            outputDir = nativeFolderBrowser0.Path;
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb(UIBlock block)
    {
        try
        {
            if (block == list_box0)
            {
                //---------Enter your code here-----------
                int[] selectedIndices = list_box0.GetSelectedItems();
                if (selectedIndices.Length == 1)
                {
                    string[] allPosts = list_box0.GetListItems();
                    string selectedPost = allPosts[selectedIndices[0]];
                }
            }
            else if (block == nativeFolderBrowser0)
            {
                //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    //------------------------------------------------------------------------------
    //ListBox specific callbacks
    //------------------------------------------------------------------------------
    //public int  AddCallback (NXOpen.BlockStyler.ListBox list_box)
    //{
    //}

    //public int  DeleteCallback(NXOpen.BlockStyler.ListBox list_box)
    //{
    //}

    //------------------------------------------------------------------------------
    //------------------------------------------------------------------------------
    //StringBlock specific callbacks
    //------------------------------------------------------------------------------
    //public void KeystrokeCallbackHandler(NXOpen.BlockStyler.StringBlock string_block, string uncommitted_value)
    //{
    //}

    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist = null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

    //public List<string> GetRegisteredPostprocessors()
    //{
    //    var registeredPosts = new List<string>();

    //    try
    //    {
    //        string ugiiCamDir = Environment.GetEnvironmentVariable("UGII_CAM_POST_DIR");
    //        string configPath = Path.Combine(ugiiCamDir, "template_post.dat");

    //        if (!File.Exists(configPath))
    //        {
    //            theUI.NXMessageBox.Show("Ошибка", NXMessageBox.DialogType.Error, "Файл конфигурации не найден");
    //            return registeredPosts;
    //        }

    //        string[] lines = File.ReadAllLines(configPath);

    //        foreach (string line in lines)
    //        {
    //            if (string.IsNullOrWhiteSpace(line) || line.Trim().StartsWith("#"))
    //                continue;

    //            string[] parts = line.Split(',');
    //            if (parts.Length > 0)
    //            {
    //                string postName = parts[0];

    //                if (!postName.StartsWith("#"))
    //                {
    //                    registeredPosts.Add(postName);
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        theUI.NXMessageBox.Show("Ошибка", NXMessageBox.DialogType.Error, $"Ошибка чтения конфигурации: {ex.Message}");
    //    }

    //    return registeredPosts;
    //}

    public string GetSelectedPostprocessor() => postName;

    public string GetOutputDirectory() => outputDir;
}
